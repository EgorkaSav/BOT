import requests
import json
import uuid
import datetime
import asyncio
from telegram import Update,InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters, PreCheckoutQueryHandler
import tracemalloc
import os
tracemalloc.start()

# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —á–µ—Ä–µ–∑ BotFather
BOT_TOKEN = 'BOT_TOKKEN'

# URL –¥–ª—è API
VPN_API_URL = 'http://{IP_ADDRESS}/{pannel_address}'
LOGIN_URL = f'{VPN_API_URL}/login'
ADD_CLIENT_URL = f'{VPN_API_URL}/panel/api/inbounds/addClient'

PROVIDER_TOKEN = "Provider_token"
SHOP_ID = "Sjhop_ID"
TRIAL_STATUS_FILE = 'trial_status.json'


# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
LOGIN_DATA = {
    'username': 'admin',
    'password': 'admin'
}

def main_menu_keyboard():
    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
    return InlineKeyboardMarkup(keyboard)

def load_trial_status():
    if os.path.exists(TRIAL_STATUS_FILE):
        with open(TRIAL_STATUS_FILE, 'r') as file:
            return json.load(file)
    return {}
def save_trial_status(trial_status):
    with open(TRIAL_STATUS_FILE, 'w') as file:
        json.dump(trial_status, file)

# –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–±–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
trial_status = load_trial_status()
# –õ–æ–≥–∏–Ω –≤ VPN API
def login_vpn():
    session = requests.Session()
    login_response = session.post(LOGIN_URL, json=LOGIN_DATA)
    if login_response.status_code == 200:
        print("–£—Å–ø–µ—à–Ω—ã–π –ª–æ–≥–∏–Ω. –ö—É–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
        return session
    else:
        print(f'–û—à–∏–±–∫–∞ –ª–æ–≥–∏–Ω–∞: {login_response.status_code}')
        return None

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ VPN –∫–ª–∏–µ–Ω—Ç–∞
def add_vpn_client(session, tg_id, duration_days):    
    epoch = datetime.datetime.utcfromtimestamp(0)
    x_time = int((datetime.datetime.now() - epoch).total_seconds() * 1000.0) + duration_days * 86400000
    client_id = str(uuid.uuid1())

    data = {
        "id": 1,
        "settings": "{\"clients\":[{\"id\":\"" + client_id + "\","
                    "\"alterId\":90,\"email\":\"" + str(tg_id) + "\","
                    "\"limitIp\":3,\"totalGB\":0,\"expiryTime\":" + str(x_time) + ","
                    "\"enable\":true,\"tgId\":\"" + str(tg_id) + "\",\"subId\":\"\"}]}"
    }

    headers = {"Accept": "application/json"}
    response = session.post(ADD_CLIENT_URL, headers=headers, json=data)

    if response.status_code == 200:
        return client_id, tg_id
    else:
        return f'–û—à–∏–±–∫–∞ API: {response.status_code}'
    

subscription_durations = {
    '1_month': 30,
    '3_month': 90,
    '6_month': 180,
    '12_month': 365
}
# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å 3 –¥–Ω—è üéÅ", callback_data='try_3_days')],
        [InlineKeyboardButton("–¢–∞—Ä–∏—Ñ—ã –∏ –ø–æ–∫—É–ø–∫–∞ üíº", callback_data='tariffs'),
         InlineKeyboardButton("–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç üõ°", callback_data='account')],
        [InlineKeyboardButton("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ üìö", callback_data='instructions'),
         InlineKeyboardButton("–û —Å–µ—Ä–≤–µ—Ä–µ üåê", callback_data='about_server')]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    if update.message:
        await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:', reply_markup=reply_markup)
    else:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º effective_chat, –µ—Å–ª–∏ update.message –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
        await context.bot.send_message(chat_id=update.effective_chat.id, text='–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:', reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–¢–∞—Ä–∏—Ñ—ã –∏ –ø–æ–∫—É–ø–∫–∞"
async def handle_tariffs(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–ª–∞–Ω–∞
    tariffs_keyboard = [
        [InlineKeyboardButton("1 –º–µ—Å—è—Ü", callback_data='1_month'),
         InlineKeyboardButton("3 –º–µ—Å—è—Ü–∞", callback_data='3_month')],
        [InlineKeyboardButton("6 –º–µ—Å—è—Ü–µ–≤", callback_data='6_month'),
         InlineKeyboardButton("12 –º–µ—Å—è—Ü–µ–≤", callback_data='12_month')],
         [InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')]
    ]
    
    reply_markup = InlineKeyboardMarkup(tariffs_keyboard)
    await query.edit_message_text(text="–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏:", reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–ª–∞–Ω–∞
async def choose_plan(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
    text = query.data

    if text in ['1_month', '3_month', '6_month', '12_month']:
        await query.edit_message_text(text=f'–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–ª–∞–Ω –Ω–∞ {text}. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–ø–ª–∞—Ç–µ...')

        amounts = {"1_month": 100, "3_month": 250, "6_month": 450, "12_month": 800}
        amount = amounts.get(text)
        try:
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω–≤–æ–π—Å–∞
            await context.bot.send_invoice(
                chat_id=query.message.chat.id,
                title=f'–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {text}',
                description=f'–û–ø–ª–∞—Ç–∞ –∑–∞ {text} –ø–æ–¥–ø–∏—Å–∫—É.',
                payload=text,  # –î–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –æ–±—Ä–∞—Ç–Ω–æ
                provider_token='Providen_ROKEN',  
                currency='RUB',
                prices=[{
                    'label': '–ü–æ–¥–ø–∏—Å–∫–∞',
                    'amount': amount * 100  # –°—É–º–º–∞ –≤ –∫–æ–ø–µ–π–∫–∞—Ö
                }],
                start_parameter='test',
                is_flexible=False,
            )
        except Exception as e:
            await query.edit_message_text(
                        f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–Ω–≤–æ–π—Å–∞: {str(e)}',
                        reply_markup=main_menu_keyboard()
                    )
    else:
        await query.edit_message_text(
                        "–í–µ—Ä–∏–Ω—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –≤—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç",
                        reply_markup=main_menu_keyboard()
                    )
# –û–±—Ä–∞–±–æ—Ç–∫–∞ PreCheckoutQuery
async def pre_checkout_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.pre_checkout_query
    await query.answer(ok=True)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
async def successful_payment_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    payment_info = update.message.successful_payment  # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ
    provider_payment_charge_id = payment_info.provider_payment_charge_id
    plan_type = payment_info.invoice_payload
    duration_days = subscription_durations.get(plan_type, 0)
    tg_id = update.message.from_user.id
    session = login_vpn()
    if session:
        api_url_list = 'http://{IP_ADDRESS}/{pannel_address}/panel/api/inbounds/list'
        header = {"Accept": "application/json"}
        user_id = tg_id
        api_list_response  = session.get(api_url_list, headers=header)
        api_list = api_list_response.json()
        user_found = False
        expiry_time_value = None 
        user_uuid = None
        for obj in api_list["obj"]:
            for client in obj["clientStats"]:
                if client["email"] == str(user_id):
                    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∫ expiryTime
                    expiry_time_value = client["expiryTime"] + duration_days * 86400000  
                    
                    user_found = True
                    break  # –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –ø–æ–∏—Å–∫ –ø–æ—Å–ª–µ –Ω–∞—Ö–æ–∂–¥–µ
            if user_found:
                settings_data = json.loads(obj["settings"])
                for client in settings_data["clients"]:
                    if client["email"] == str(user_id):
                        user_uuid = client["id"]  # –ò–∑–≤–ª–µ–∫–∞–µ–º UUID
                        data_update = {
                                "id": 1,
                                "settings":
                                "{\"clients\":"
                                "[{\"id\":\"" + str(user_uuid) + "\","
                                "\"alterId\":90,\"email\":\"" + str(tg_id) + "\","
                                "\"limitIp\":3,\"totalGB\":0,"
                                "\"expiryTime\":" + str(expiry_time_value) + ",\"enable\":true,\"tgId\":\"" + str(tg_id) + "\",\"subId\":\"\"}]}"
                                }
                        update_url = f'http://{IP_ADDRESS}/{pannel_address}/panel/api/inbounds/updateClient/{user_uuid}'
                        response_user = session.post(update_url, headers=header, json=data_update)
                        await context.bot.send_message(chat_id=tg_id, text=f'–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–∞! –û–ø–ª–∞—á–µ–Ω–æ–µ –≤—Ä–µ–º—è –¥–æ–±–∞–≤–ª–µ–Ω–æ')
                        break
                break
        

        else:
            client_id, tg_id = add_vpn_client(session, tg_id, duration_days)        
            url_vpn = f'vless://{client_id}@IP_ADDRESS}:{PORT}?type=tcp&security=reality&pbk=F7b-XmxQBisfsNOhgTZ7JuiXi6KY8mPZDSi-aqVkpXE&fp=random&sni=google.com&sid=de057a28&spx=%2F#VLESS-{tg_id}'        
            message_text = (
        "–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–∞! –í–æ—Ç –≤–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ VPN:\n\n"
        "<b>–î–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Ç–µ–∫—Å—Ç –Ω–∏–∂–µ –∏ —Å–ª–µ–¥–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –¥—è–ª —Å–≤–æ–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:</b>\n\n"
        f"<code>{url_vpn}</code>"
    )

        await context.bot.send_message(
            chat_id=tg_id,
            text=message_text,
            parse_mode="HTML",
            reply_markup=main_menu_keyboard()
        )
    else:
        await query.edit_message_text(
                        "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞ VPN —Å–µ—Ä–≤–µ—Ä–µ.",
                        reply_markup=main_menu_keyboard()
                    )
    
    await start(update, context)
async def show_account_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    tg_id = query.from_user.id
    session = login_vpn()

    if session:
        api_url_list = f'{VPN_API_URL}/panel/api/inbounds/list'
        header = {"Accept": "application/json"}
        api_list_response = session.get(api_url_list, headers=header)
        api_list = api_list_response.json()
        
        user_found = False
        user_uuid = None
        expiry_time = None

        # –ü–æ–∏—Å–∫ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        for obj in api_list["obj"]:
            for client in obj["clientStats"]:
                if client["email"] == str(tg_id):
                    expiry_time = client["expiryTime"]
                    user_found = True
                    break

            if user_found:
                settings_data = json.loads(obj["settings"])
                for client in settings_data["clients"]:
                    if client["email"] == str(tg_id):
                        user_uuid = client["id"]
                        break
                break

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –≤—ã–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_found and user_uuid:
            # –ü–æ–¥—Å—á–µ—Ç –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –≤—Ä–µ–º–µ–Ω–∏ –≤ –¥–Ω—è—Ö
            remaining_time_ms = expiry_time - int((datetime.datetime.now() - datetime.datetime(1970, 1, 1)).total_seconds() * 1000)
            remaining_days = max(0, remaining_time_ms // (1000 * 60 * 60 * 24))
            message_text = (
                "<b>–í–∞—à ID –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏:</b>\n"
                f"<code>{user_uuid}</code>\n"
                "<b>–û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –ø–æ–¥–ø–∏—Å–∫–∏: </b>"
                f"<code>{remaining_days}</code> –¥–Ω–µ–π"
            )

            # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–æ–π "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
            reply_markup = InlineKeyboardMarkup([[
                InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')
            ]])

            await context.bot.send_message(
                chat_id=tg_id,
                text=message_text,
                parse_mode="HTML",
                reply_markup=reply_markup  # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∑–¥–µ—Å—å
            )
            
            
        else:
            await query.edit_message_text(
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            reply_markup=main_menu_keyboard()
        )
            
    else:
        await query.edit_message_text(
            "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ VPN.",
            reply_markup=main_menu_keyboard()
        )
def check_existing_user(session, tg_id):
    api_url_list = f'{VPN_API_URL}/panel/api/inbounds/list'
    header = {"Accept": "application/json"}
    api_list_response = session.get(api_url_list, headers=header)
    
    if api_list_response.status_code != 200:
        return None, None

    api_list = api_list_response.json()
    
    # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω—É–∂–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    for obj in api_list["obj"]:
        found_email = False
        expiry_time = None

        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º clientStats –¥–ª—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email
        for client in obj["clientStats"]:
            if client["email"] == str(tg_id):
                expiry_time = client["expiryTime"]
                found_email = True
                break  # –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –ø–æ–∏—Å–∫ –≤ clientStats –ø–æ—Å–ª–µ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è email
        
        # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –Ω—É–∂–Ω—ã–π email, –∏—â–µ–º UUID –≤ settings
        if found_email:
            settings_data = json.loads(obj["settings"])
            for client in settings_data["clients"]:
                if client["email"] == str(tg_id):
                    user_uuid = client["id"]  # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π UUID
                    return user_uuid, expiry_time  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ UUID –∏ expiryTime

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
    return None, None

async def handle_try_3_days(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    tg_id = str(query.from_user.id)  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ JSON

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥
    if trial_status.get(tg_id, False):
        await query.edit_message_text(
            "–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏.",
            reply_markup=main_menu_keyboard()
        )
    else:
        # –õ–æ–≥–∏–Ω–∏–º—Å—è –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        session = login_vpn()
        if session:
            user_uuid, expiry_time = check_existing_user(session, tg_id)
            if user_uuid:
                additional_time = 3 * 86400000  # 3 –¥–Ω—è –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
                new_expiry_time = expiry_time + additional_time
                data_update = {
                                "id": 1,
                                "settings":
                                "{\"clients\":"
                                "[{\"id\":\"" + str(user_uuid) + "\","
                                "\"alterId\":90,\"email\":\"" + str(tg_id) + "\","
                                "\"limitIp\":3,\"totalGB\":0,"
                                "\"expiryTime\":" + str(new_expiry_time) + ",\"enable\":true,\"tgId\":\"" + str(tg_id) + "\",\"subId\":\"\"}]}"
                                }

                update_url = f'{VPN_API_URL}/panel/api/inbounds/updateClient/{user_uuid}'
                response_user = session.post(update_url, headers={"Accept": "application/json"}, json=data_update)
                if response_user.status_code == 200:
                    trial_status[tg_id] = True  # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç—Ä–∏–∞–ª—å–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
                    save_trial_status(trial_status)
                    await query.edit_message_text(
                        "–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –í–∞–º –¥–æ–±–∞–≤–ª–µ–Ω–æ 3 –¥–Ω—è –ø–æ–¥–ø–∏—Å–∫–∏.",
                        reply_markup=main_menu_keyboard()
                    )
                else:
                    await query.edit_message_text(
                        "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
                        reply_markup=main_menu_keyboard()
                    )
            else:
                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ 3 –¥–Ω—è
                client_id, tg_id = add_vpn_client(session, tg_id, 3)
                if client_id:
                    trial_status[tg_id] = True
                    save_trial_status(trial_status) 
                    url_vpn = f'vless://{client_id}@IP_ADDRESS}:{PORT}?type=tcp&security=reality&pbk=F7b-XmxQBisfsNOhgTZ7JuiXi6KY8mPZDSi-aqVkpXE&fp=random&sni=google.com&sid=de057a28&spx=%2F#VLESS-{tg_id}'        
                    message_text = (
                        "–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –í–æ—Ç –≤–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ VPN:\n\n"
                        "<b>–î–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Ç–µ–∫—Å—Ç –Ω–∏–∂–µ –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –¥–ª—è –≤–∞—à–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:</b>\n\n"
                        f"<code>{url_vpn}</code>"
                    )

                    await context.bot.send_message(
                        chat_id=query.from_user.id,
                        text=message_text,
                        parse_mode="HTML",
                        reply_markup=main_menu_keyboard()
                    )
                else:
                    await query.edit_message_text(
                        "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
                        reply_markup=main_menu_keyboard()
                    )
        else:
            await query.edit_message_text(
                        "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞ VPN —Å–µ—Ä–≤–µ—Ä–µ.",
                        reply_markup=main_menu_keyboard()
                    )

application = ApplicationBuilder().token(BOT_TOKEN).build()
application.add_handler(CommandHandler("start", start))
application.add_handler(CallbackQueryHandler(handle_try_3_days, pattern='try_3_days'))
application.add_handler(CallbackQueryHandler(handle_tariffs, pattern='tariffs'))
application.add_handler(CallbackQueryHandler(show_account_info, pattern='account'))
application.add_handler(CallbackQueryHandler(start, pattern='main_menu'))
application.add_handler(CallbackQueryHandler(choose_plan))
application.add_handler(MessageHandler(filters.SUCCESSFUL_PAYMENT, successful_payment_callback))
application.add_handler(PreCheckoutQueryHandler(pre_checkout_callback))
application.run_polling()